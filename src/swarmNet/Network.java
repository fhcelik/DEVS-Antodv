package swarmNet;

/**
 * <p>Title: swarmNet</p>
 * <p>Description: The swarm network based on DEVS formalism</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: Arizona State University</p>
 * @author Ahmet Zengin
 * @version 1.0
 */

import java.awt.Dimension;
import java.awt.Point;

import model.modeling.IODevs;
import swarmNet.Components.IPAddress;
import swarmNet.Components.NETPacket;
import swarmNet.Framework.AtomicNode;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class Network extends ViewableDigraph {

	private final int NUMBER_OF_NODE;
	private byte port_number;
	private IODevs nodes[];

	public Network() {
		this("Network", 1, 1, 50);
	}

	public Network(String name, double processing_time, double propagation_delay, int nn) {
		super(name);
		NUMBER_OF_NODE = nn;
		make(processing_time, propagation_delay);
		addTestInput("in", new NETPacket("packet_data", new IPAddress(0, 0, 0,49)));
	}

	protected void make(double processing_time, double propagation_delay) {
		addInport("in");
		addInport("inEvent");
		addOutport("out");
		addOutport("outEvent");

		// create the n router
		nodes = new IODevs[NUMBER_OF_NODE];
		for (int i = 0; i < nodes.length; i++) {
			if (i == 0 || i == 9 || i == NUMBER_OF_NODE - 1
					|| i == NUMBER_OF_NODE - 10)
				port_number = 2;
			else if (i > 0 && i < 9 || i % 10 == 0 || (i + 1) % 10 == 0
					|| i > NUMBER_OF_NODE - 10 && i < NUMBER_OF_NODE - 1)
				port_number = 3;
			else
				port_number = 4;
			nodes[i] = new AtomicNode("Router" + i, new IPAddress(i),
					(processing_time));
			add(nodes[i]);
		}

		// do coupling
		/*
		 * addCoupling(this, "in", nodes[0], "NIC1-in");
		 * 
		 * componentIterator c = getComponents().cIterator();
		 * while(c.hasNext()){ IODevs node=c.nextComponent(); addCoupling(this,
		 * "inEvent",node , "inEvent"); addCoupling(node, "outEvent", this,
		 * "outEvent"); }
		 * 
		 * /for (int i = 0; i < getComponents().size(); i++) {
		 * 
		 * if ((i + 1) % 10 != 0) { addCoupling(nodes[i], "NIC1-out", nodes[i +
		 * 1], "NIC2-in"); addCoupling(nodes[i + 1], "NIC2-out", nodes[i],
		 * "NIC1-in"); } if (i % 10 != 0 && (i + 1) % 10 != 0 && i <
		 * NUMBER_OF_NODE - 21) { addCoupling(nodes[i], "NIC3-out", nodes[i +
		 * 10], "NIC4-in"); addCoupling(nodes[i + 10], "NIC4-out", nodes[i],
		 * "NIC3-in"); } if (i % 10 == 0 && i < NUMBER_OF_NODE - 29) {
		 * addCoupling(nodes[i], "NIC2-out", nodes[i + 10], "NIC3-in");
		 * addCoupling(nodes[i + 10], "NIC3-out", nodes[i], "NIC2-in"); } if ((i
		 * + 1) % 10 == 0 && i > 10 && i < NUMBER_OF_NODE - 10) {
		 * addCoupling(nodes[i], "NIC3-out", nodes[i + 10], "NIC1-in");
		 * addCoupling(nodes[i + 10], "NIC1-out", nodes[i], "NIC3-in"); }
		 * 
		 * if (i > NUMBER_OF_NODE - 10 && i < NUMBER_OF_NODE - 1) {
		 * addCoupling(nodes[i], "NIC3-out", nodes[i - 10], "NIC3-in");
		 * addCoupling(nodes[i - 10], "NIC3-out", nodes[i], "NIC3-in"); }
		 * 
	
		 * 
		 * }
		 */
		 addCoupling(nodes[9], "NIC1-out", nodes[19], "NIC1-in");
		 addCoupling(nodes[19], "NIC1-out", nodes[9], "NIC1-in");
		 addCoupling(nodes[NUMBER_OF_NODE - 20], "NIC2-out",
		 nodes[NUMBER_OF_NODE - 10], "NIC2-in");
		 addCoupling(nodes[NUMBER_OF_NODE - 10], "NIC2-out",
		 nodes[NUMBER_OF_NODE - 20], "NIC2-in");
		for (int i = 0; i < getComponents().size(); i += 10) {
			//addCoupling(nodes[i], "NIC2-out", nodes[i + 10], "NIC3-in");
			//addCoupling(nodes[i + 10], "NIC3-out", nodes[i], "NIC2-in");
			for (int j = 0; j < 9; j++) {
				addCoupling(nodes[i + j], "NIC1-out", nodes[i + j + 1],
						"NIC2-in");
				addCoupling(nodes[i + j + 1], "NIC2-out", nodes[i + j],
						"NIC1-in");
			}
		}
		for (int i = 1; i < 9; i++) {
			for (int j = i; j < getComponents().size() - 20 + 1; j += 10) {
				addCoupling(nodes[j], "NIC3-out", nodes[10 + j], "NIC4-in");
				addCoupling(nodes[10 + j], "NIC4-out", nodes[j], "NIC3-in");
			}
		}
		
		//for(int i=)
		initialize();
		int x = 0, y = 0;
		preferredSize = new Dimension(1000, 1000);
		for (int i = 0; i < NUMBER_OF_NODE; i++) {
			if (i != 0 && i % 10 == 0) {
				y += 100;
				x = 0;
			}
			((ViewableComponent) withName("Router" + i))
					.setPreferredLocation(new Point(x, y));
			x += 125;
		}
	}

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(1486, 489);
        ((ViewableComponent)withName("Router2")).setPreferredLocation(new Point(250, 0));
        ((ViewableComponent)withName("Router33")).setPreferredLocation(new Point(375, 300));
        ((ViewableComponent)withName("Router48")).setPreferredLocation(new Point(1000, 400));
        ((ViewableComponent)withName("Router4")).setPreferredLocation(new Point(500, 0));
        ((ViewableComponent)withName("Router12")).setPreferredLocation(new Point(250, 100));
        ((ViewableComponent)withName("Router49")).setPreferredLocation(new Point(1125, 400));
        ((ViewableComponent)withName("Router15")).setPreferredLocation(new Point(625, 100));
        ((ViewableComponent)withName("Router7")).setPreferredLocation(new Point(875, 0));
        ((ViewableComponent)withName("Router42")).setPreferredLocation(new Point(250, 400));
        ((ViewableComponent)withName("Router13")).setPreferredLocation(new Point(375, 100));
        ((ViewableComponent)withName("Router47")).setPreferredLocation(new Point(875, 400));
        ((ViewableComponent)withName("Router19")).setPreferredLocation(new Point(1125, 100));
        ((ViewableComponent)withName("Router11")).setPreferredLocation(new Point(125, 100));
        ((ViewableComponent)withName("Router5")).setPreferredLocation(new Point(625, 0));
        ((ViewableComponent)withName("Router20")).setPreferredLocation(new Point(0, 200));
        ((ViewableComponent)withName("Router17")).setPreferredLocation(new Point(875, 100));
        ((ViewableComponent)withName("Router32")).setPreferredLocation(new Point(250, 300));
        ((ViewableComponent)withName("Router43")).setPreferredLocation(new Point(375, 400));
        ((ViewableComponent)withName("Router27")).setPreferredLocation(new Point(875, 200));
        ((ViewableComponent)withName("Router8")).setPreferredLocation(new Point(1000, 0));
        ((ViewableComponent)withName("Router37")).setPreferredLocation(new Point(875, 300));
        ((ViewableComponent)withName("Router38")).setPreferredLocation(new Point(1000, 300));
        ((ViewableComponent)withName("Router24")).setPreferredLocation(new Point(500, 200));
        ((ViewableComponent)withName("Router9")).setPreferredLocation(new Point(1125, 0));
        ((ViewableComponent)withName("Router44")).setPreferredLocation(new Point(500, 400));
        ((ViewableComponent)withName("Router34")).setPreferredLocation(new Point(500, 300));
        ((ViewableComponent)withName("Router46")).setPreferredLocation(new Point(750, 400));
        ((ViewableComponent)withName("Router14")).setPreferredLocation(new Point(500, 100));
        ((ViewableComponent)withName("Router6")).setPreferredLocation(new Point(750, 0));
        ((ViewableComponent)withName("Router35")).setPreferredLocation(new Point(625, 300));
        ((ViewableComponent)withName("Router29")).setPreferredLocation(new Point(1125, 200));
        ((ViewableComponent)withName("Router18")).setPreferredLocation(new Point(1000, 100));
        ((ViewableComponent)withName("Router10")).setPreferredLocation(new Point(0, 100));
        ((ViewableComponent)withName("Router0")).setPreferredLocation(new Point(0, 0));
        ((ViewableComponent)withName("Router36")).setPreferredLocation(new Point(750, 300));
        ((ViewableComponent)withName("Router45")).setPreferredLocation(new Point(625, 400));
        ((ViewableComponent)withName("Router1")).setPreferredLocation(new Point(125, 0));
        ((ViewableComponent)withName("Router3")).setPreferredLocation(new Point(375, 0));
        ((ViewableComponent)withName("Router25")).setPreferredLocation(new Point(625, 200));
        ((ViewableComponent)withName("Router26")).setPreferredLocation(new Point(750, 200));
        ((ViewableComponent)withName("Router31")).setPreferredLocation(new Point(125, 300));
        ((ViewableComponent)withName("Router39")).setPreferredLocation(new Point(1125, 300));
        ((ViewableComponent)withName("Router22")).setPreferredLocation(new Point(250, 200));
        ((ViewableComponent)withName("Router40")).setPreferredLocation(new Point(0, 400));
        ((ViewableComponent)withName("Router28")).setPreferredLocation(new Point(1000, 200));
        ((ViewableComponent)withName("Router23")).setPreferredLocation(new Point(375, 200));
        ((ViewableComponent)withName("Router30")).setPreferredLocation(new Point(0, 300));
        ((ViewableComponent)withName("Router41")).setPreferredLocation(new Point(125, 400));
        ((ViewableComponent)withName("Router21")).setPreferredLocation(new Point(125, 200));
        ((ViewableComponent)withName("Router16")).setPreferredLocation(new Point(750, 100));
    }
}
